# Global Adult HIV Prevalence Data Analysis (2024)
# Load necessary libraries
library(tidyverse)  # For data manipulation and visualization
library(ggplot2)    # For advanced plotting
library(corrplot)   # For correlation plots
library(knitr)      # For generating tables
library(scales)     # For better scaling in plots
# Step 1: Load the dataset
# Replace 'C:\\Users\\mwanz\\OneDrive\\Desktop\\Global Adult HIV Prevalence\\hiv_prevalence.csv' with the actual path
dataset_path <- "C:\\Users\\mwanz\\OneDrive\\Desktop\\Global Adult HIV Prevalence\\hiv_prevalence.csv"
hiv_data <- read.csv(dataset_path, stringsAsFactors = FALSE)
# ============================================
# Global Adult HIV Prevalence Analysis (2024)
# ============================================
# Load necessary libraries
library(tidyverse)  # For data manipulation and visualization
library(ggplot2)    # For advanced plotting
library(corrplot)   # For correlation plots
library(scales)     # For formatting axis scales
# ============================================
# Step 1: Load the Dataset
# ============================================
# Set file path
file_path <- "C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/hiv_prevalence.csv"
# Load the dataset
hiv_data <- read.csv(file_path, stringsAsFactors = FALSE)
# ============================================
# Global Adult HIV Prevalence Analysis (2024)
# ============================================
# Load necessary libraries
library(tidyverse)  # For data manipulation and visualization
library(ggplot2)    # For advanced plotting
library(corrplot)   # For correlation plots
library(scales)     # For formatting axis scales
# ============================================
# Step 1: Load the Dataset
# ============================================
# Set file path
file_path <- "C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/hiv_prevalence.csv"
# Check the file first (for debugging)
raw_data <- read.csv(file_path, header = FALSE)
head(raw_data)
# If the columns don't align, inspect the first few rows
# Try to load with no headers to see the structure
# If the file uses a semicolon delimiter or another delimiter, load it explicitly
hiv_data <- read.csv(file_path, stringsAsFactors = FALSE, sep = ";")  # Update 'sep' if needed
source("C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/Global_Adult_HIV_Prevalence_Analysis_2024.R")
# Load necessary libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
# ===========================================
# Step 1: Load the Dataset
# ===========================================
# Specify the file path
file_path <- "C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/hiv_prevalence.csv"
# Load the dataset
hiv_data <- read.csv(file_path, stringsAsFactors = FALSE)
# Load necessary libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
# ===========================================
# Step 1: Load the Dataset
# ===========================================
# Specify the file path
file_path <- "C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/hiv_prevalence.csv"
# Load the dataset
hiv_data <- read.csv(file_path, stringsAsFactors = FALSE)
# Load necessary libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
# ===========================================
# Step 1: Load the Dataset
# ===========================================
# Specify the file path
file_path <- "C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/hiv_prevalence.csv"
# Load the dataset
hiv_data <- read.csv(file_path, stringsAsFactors = FALSE)
# Load necessary libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
# ===========================================
# Step 1: Load the Dataset
# ===========================================
# Specify the file path
file_path <- "C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/hiv_prevalence.csv"
# Load the dataset
hiv_data <- read.csv(file_path, stringsAsFactors = FALSE)
# Load necessary libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
# ===========================================
# Step 1: Load the Dataset
# ===========================================
# Specify the file path
file_path <- "C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/hiv_prevalence.csv"
# Load the dataset
hiv_data <- read.csv(file_path, stringsAsFactors = FALSE)
# Load necessary libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
# ===========================================
# Step 1: Load the Dataset
# ===========================================
# Specify the file path
file_path <- "C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/hiv_prevalence.csv"
# Load the dataset
hiv_data <- read.csv(file_path, stringsAsFactors = FALSE)
source("C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/Global_Adult_HIV_Prevalence_Analysis_2024.R")
# Load necessary libraries
library(tidyverse)  # For data manipulation and visualization
library(corrplot)   # For correlation matrix visualization
library(ggplot2)    # For plotting
# ===========================================
# Step 1: Load the Dataset
# ===========================================
# Specify the file path
file_path <- "C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/hiv_prevalence.csv"
# Attempt to load the dataset with fill = TRUE to handle missing columns
hiv_data <- read.csv(file_path, stringsAsFactors = FALSE, fill = TRUE)
source("C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/Global_Adult_HIV_Prevalence_Analysis_2024.R")
# Load necessary libraries
library(tidyverse)
# Specify the file path
file_path <- "C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/hiv_prevalence.csv"
# Read the file without assuming column names
hiv_data <- read.csv(file_path, stringsAsFactors = FALSE, header = FALSE)
# Check the first few rows of the dataset
head(hiv_data)
# Check if there are more columns than expected
str(hiv_data)
# Manually assign column names based on the dataset description
colnames(hiv_data) <- c("Country_Region", "Adult_Prevalence", "People_Living_With_HIV", "Annual_Deaths", "Year")
source("C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/Global_Adult_HIV_Prevalence_Analysis_2024.R")
source("C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/Global_Adult_HIV_Prevalence_Analysis_2024.R")
# Load necessary libraries
library(tidyverse)
library(corrplot)
# ===========================================
# Step 1: Load the Dataset
# ===========================================
# Specify the file path
file_path <- "C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/hiv_prevalence.csv"
# Read the dataset using semicolon as the delimiter
hiv_data <- read.csv(file_path, stringsAsFactors = FALSE, sep = ";", header = FALSE)
# Check the first few rows of the dataset
head(hiv_data)
# ===========================================
# Step 2: Clean the Data
# ===========================================
# Remove rows that contain metadata (e.g., first and second rows)
hiv_data_cleaned <- hiv_data[-c(1, 2), ]
# Check the cleaned data
head(hiv_data_cleaned)
# Fix column names to make them appropriate
colnames(hiv_data_cleaned) <- c("Country_Region", "Adult_Prevalence", "People_Living_With_HIV", "Annual_Deaths", "Year")
# Clean up the data by removing unwanted characters like extra spaces and non-breaking spaces
hiv_data_cleaned$Country_Region <- gsub("\xa0", "", hiv_data_cleaned$Country_Region)
source("C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/Global_Adult_HIV_Prevalence_Analysis_2024.R")
# Load necessary libraries
library(tidyverse)
library(corrplot)
library(stringr)  # For handling string replacements
# ===========================================
# Step 1: Load the Dataset
# ===========================================
# Specify the file path
file_path <- "C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/hiv_prevalence.csv"
# Read the dataset using semicolon as the delimiter
hiv_data <- read.csv(file_path, stringsAsFactors = FALSE, sep = ";", header = FALSE)
# Check the first few rows of the dataset
head(hiv_data)
# ===========================================
# Step 2: Clean the Data
# ===========================================
# Remove rows that contain metadata (e.g., first and second rows)
hiv_data_cleaned <- hiv_data[-c(1, 2), ]
# Check the cleaned data
head(hiv_data_cleaned)
# Fix column names to make them appropriate
colnames(hiv_data_cleaned) <- c("Country_Region", "Adult_Prevalence", "People_Living_With_HIV", "Annual_Deaths", "Year")
# Clean up the data by removing unwanted characters like extra spaces and non-breaking spaces
hiv_data_cleaned$Country_Region <- str_replace_all(hiv_data_cleaned$Country_Region, "\u00A0", "")  # Replace non-breaking space with nothing
hiv_data_cleaned$Country_Region <- str_trim(hiv_data_cleaned$Country_Region)  # Remove extra spaces
# Clean up the Adult_Prevalence column (remove percentage signs)
hiv_data_cleaned$Adult_Prevalence <- as.numeric(gsub("%", "", hiv_data_cleaned$Adult_Prevalence))
# Clean up the People_Living_With_HIV and Annual_Deaths columns (remove commas and convert to numeric)
hiv_data_cleaned$People_Living_With_HIV <- as.numeric(gsub(",", "", hiv_data_cleaned$People_Living_With_HIV))
hiv_data_cleaned$Annual_Deaths <- as.numeric(gsub(",", "", hiv_data_cleaned$Annual_Deaths))
# Convert Year column to numeric
hiv_data_cleaned$Year <- as.numeric(hiv_data_cleaned$Year)
# Check for missing values
sum(is.na(hiv_data_cleaned))
# ===========================================
# Step 3: Exploratory Data Analysis (EDA)
# ===========================================
# Check the structure of the cleaned data
str(hiv_data_cleaned)
# Summary statistics
summary(hiv_data_cleaned)
# Distribution of Adult HIV Prevalence
ggplot(hiv_data_cleaned, aes(x = Adult_Prevalence)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Adult HIV Prevalence", x = "Adult HIV Prevalence (%)", y = "Frequency")
# Scatter plot: HIV prevalence vs. Annual deaths
ggplot(hiv_data_cleaned, aes(x = Adult_Prevalence, y = Annual_Deaths)) +
geom_point(color = "red", alpha = 0.7) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = "Adult HIV Prevalence vs. Annual Deaths", x = "Adult HIV Prevalence (%)", y = "Annual Deaths")
# Correlation between Adult Prevalence, People Living With HIV, and Annual Deaths
correlation_matrix <- cor(hiv_data_cleaned[, c("Adult_Prevalence", "People_Living_With_HIV", "Annual_Deaths")], use = "complete.obs")
print("Correlation Matrix:")
print(correlation_matrix)
# Heatmap of the correlation matrix
corrplot(correlation_matrix, method = "color", addCoef.col = "black", number.cex = 0.7, title = "Correlation Matrix")
# ===========================================
# Step 4: Regional Analysis
# ===========================================
# Summarize by region
regional_summary <- hiv_data_cleaned %>%
group_by(Country_Region) %>%
summarise(
Avg_Adult_Prevalence = mean(Adult_Prevalence, na.rm = TRUE),
Total_Annual_Deaths = sum(Annual_Deaths, na.rm = TRUE),
Total_People_Living_With_HIV = sum(People_Living_With_HIV, na.rm = TRUE)
) %>%
arrange(desc(Total_Annual_Deaths))
# Top 10 regions with the highest total deaths
top_regions <- regional_summary[1:10, ]
print("Top 10 Regions with Highest Annual Deaths:")
print(top_regions)
# ===========================================
# Step 5: Trends Over Time
# ===========================================
# Line plot of average prevalence over time
trend_data <- hiv_data_cleaned %>%
group_by(Year) %>%
summarise(Avg_Adult_Prevalence = mean(Adult_Prevalence, na.rm = TRUE))
ggplot(trend_data, aes(x = Year, y = Avg_Adult_Prevalence)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 2) +
labs(title = "Trend of Adult HIV Prevalence Over Time", x = "Year", y = "Average Adult HIV Prevalence (%)")
# ===========================================
# Step 6: Statistical Modeling
# ===========================================
# Linear regression to predict annual deaths based on HIV prevalence
model <- lm(Annual_Deaths ~ Adult_Prevalence, data = hiv_data_cleaned)
# Summary of the model
summary(model)
# Plot the regression line
ggplot(hiv_data_cleaned, aes(x = Adult_Prevalence, y = Annual_Deaths)) +
geom_point(color = "red") +
geom_smooth(method = "lm", color = "blue") +
labs(title = "Linear Regression: Annual Deaths vs. HIV Prevalence", x = "Adult HIV Prevalence (%)", y = "Annual Deaths")
# ===========================================
# Step 7: Summary and Insights
# ===========================================
# Key Insights
print("Key Insights:")
print("- Top regions with the highest prevalence and annual deaths have been identified.")
print("- A strong correlation exists between HIV prevalence and annual deaths.")
print("- The trend over time shows...")
# Load necessary libraries
library(tidyverse)
library(corrplot)
library(stringr)  # For handling string replacements
# ===========================================
# Step 1: Load the Dataset
# ===========================================
# Specify the file path
file_path <- "C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/hiv_prevalence.csv"
# Read the dataset using semicolon as the delimiter
hiv_data <- read.csv(file_path, stringsAsFactors = FALSE, sep = ";", header = FALSE)
# Check the first few rows of the dataset
head(hiv_data)
# ===========================================
# Step 2: Clean the Data
# ===========================================
# Remove rows that contain metadata (e.g., first and second rows)
hiv_data_cleaned <- hiv_data[-c(1, 2), ]
# Check the cleaned data
head(hiv_data_cleaned)
# Fix column names to make them appropriate
colnames(hiv_data_cleaned) <- c("Country_Region", "Adult_Prevalence", "People_Living_With_HIV", "Annual_Deaths", "Year")
# Clean up the data by removing unwanted characters like extra spaces and non-breaking spaces
hiv_data_cleaned$Country_Region <- str_replace_all(hiv_data_cleaned$Country_Region, "\u00A0", "")  # Replace non-breaking space with nothing
hiv_data_cleaned$Country_Region <- str_trim(hiv_data_cleaned$Country_Region)  # Remove extra spaces
# Clean up the Adult_Prevalence column (remove percentage signs)
hiv_data_cleaned$Adult_Prevalence <- as.numeric(gsub("%", "", hiv_data_cleaned$Adult_Prevalence))
# Clean up the People_Living_With_HIV and Annual_Deaths columns (remove commas and convert to numeric)
hiv_data_cleaned$People_Living_With_HIV <- as.numeric(gsub(",", "", hiv_data_cleaned$People_Living_With_HIV))
hiv_data_cleaned$Annual_Deaths <- as.numeric(gsub(",", "", hiv_data_cleaned$Annual_Deaths))
# Convert Year column to numeric
hiv_data_cleaned$Year <- as.numeric(hiv_data_cleaned$Year)
# Check for missing values
sum(is.na(hiv_data_cleaned))
# ===========================================
# Step 3: Exploratory Data Analysis (EDA)
# ===========================================
# Check the structure of the cleaned data
str(hiv_data_cleaned)
# Summary statistics
summary(hiv_data_cleaned)
# Distribution of Adult HIV Prevalence
ggplot(hiv_data_cleaned, aes(x = Adult_Prevalence)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Adult HIV Prevalence", x = "Adult HIV Prevalence (%)", y = "Frequency")
# Scatter plot: HIV prevalence vs. Annual deaths
ggplot(hiv_data_cleaned, aes(x = Adult_Prevalence, y = Annual_Deaths)) +
geom_point(color = "red", alpha = 0.7) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = "Adult HIV Prevalence vs. Annual Deaths", x = "Adult HIV Prevalence (%)", y = "Annual Deaths")
# Correlation between Adult Prevalence, People Living With HIV, and Annual Deaths
correlation_matrix <- cor(hiv_data_cleaned[, c("Adult_Prevalence", "People_Living_With_HIV", "Annual_Deaths")], use = "complete.obs")
print("Correlation Matrix:")
print(correlation_matrix)
# Heatmap of the correlation matrix
corrplot(correlation_matrix, method = "color", addCoef.col = "black", number.cex = 0.7, title = "Correlation Matrix")
# ===========================================
# Step 4: Regional Analysis
# ===========================================
# Summarize by region
regional_summary <- hiv_data_cleaned %>%
group_by(Country_Region) %>%
summarise(
Avg_Adult_Prevalence = mean(Adult_Prevalence, na.rm = TRUE),
Total_Annual_Deaths = sum(Annual_Deaths, na.rm = TRUE),
Total_People_Living_With_HIV = sum(People_Living_With_HIV, na.rm = TRUE)
) %>%
arrange(desc(Total_Annual_Deaths))
# Top 10 regions with the highest total deaths
top_regions <- regional_summary[1:10, ]
print("Top 10 Regions with Highest Annual Deaths:")
print(top_regions)
# ===========================================
# Step 5: Trends Over Time
# ===========================================
# Line plot of average prevalence over time
trend_data <- hiv_data_cleaned %>%
group_by(Year) %>%
summarise(Avg_Adult_Prevalence = mean(Adult_Prevalence, na.rm = TRUE))
ggplot(trend_data, aes(x = Year, y = Avg_Adult_Prevalence)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 2) +
labs(title = "Trend of Adult HIV Prevalence Over Time", x = "Year", y = "Average Adult HIV Prevalence (%)")
# ===========================================
# Step 6: Statistical Modeling
# ===========================================
# Linear regression to predict annual deaths based on HIV prevalence
model <- lm(Annual_Deaths ~ Adult_Prevalence, data = hiv_data_cleaned)
# Summary of the model
summary(model)
# Plot the regression line
ggplot(hiv_data_cleaned, aes(x = Adult_Prevalence, y = Annual_Deaths)) +
geom_point(color = "red") +
geom_smooth(method = "lm", color = "blue") +
labs(title = "Linear Regression: Annual Deaths vs. HIV Prevalence", x = "Adult HIV Prevalence (%)", y = "Annual Deaths")
# ===========================================
# Step 7: Summary and Insights
# ===========================================
# Key Insights
print("Key Insights:")
print("- Top regions with the highest prevalence and annual deaths have been identified.")
print("- A strong correlation exists between HIV prevalence and annual deaths.")
print("- The trend over time shows...")
source("C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/Global_Adult_HIV_Prevalence_Analysis_2024.R")
source("C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/Global_Adult_HIV_Prevalence_Analysis_2024.R")
source("C:/Users/mwanz/OneDrive/Desktop/Global Adult HIV Prevalence/Global_Adult_HIV_Prevalence_Analysis_2024.R")
